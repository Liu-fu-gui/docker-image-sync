name: docker-image-sync
on:
  push:
    branches: [ main ]
  #schedule:
  #  - cron: '0 01 * * *'

jobs:
  image-sync:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: 镜像同步配置处理
      run: |
        sed -i 's/DOCKERHUB_PASSWORD/${{ secrets.DOCKERHUB_PASSWORD }}/g' config.json
        
    - name: 下载image-sync工具包
      run: |
        wget https://github.com/AliyunContainerService/image-syncer/releases/download/v1.5.5/image-syncer-v1.5.5-linux-amd64.tar.gz
        tar -zxf image-syncer-v1.5.5-linux-amd64.tar.gz
      
    - name: 从config.json中提取源和目标镜像
      id: extract_images
      run: |
        # 提取源镜像和目标镜像对，并清理空格或特殊字符
        IMAGE_PAIRS=$(jq -r '.images | to_entries | .[] | "\(.key) \(.value)"' config.json | xargs)

        # 将镜像对写入环境变量
        echo "IMAGE_PAIRS=${IMAGE_PAIRS}" >> $GITHUB_ENV
        
        # 输出调试信息
        echo "Extracted IMAGE_PAIRS: ${IMAGE_PAIRS}"

    - name: 执行同步镜像
      id: sync
      run: |
        # 提取源镜像和目标镜像的配对并进行同步
        echo "$IMAGE_PAIRS" | while read SOURCE TARGET; do
          echo "同步源镜像: ${SOURCE} 到目标镜像: ${TARGET}"
          ./image-syncer --proc=20 --source=${SOURCE} --target=${TARGET} --retries=2
        done

    - name: 发送钉钉通知
      run: |
        STATUS="同步成功"
        if [[ "${{ steps.sync.outcome }}" == "failure" ]]; then
          STATUS="同步失败"
        elif [[ "${{ steps.sync.outcome }}" == "skipped" ]]; then
          STATUS="镜像已存在"
        fi

        # 发送钉钉通知
        echo "$IMAGE_PAIRS" | while read SOURCE TARGET; do
          curl -X POST https://oapi.dingtalk.com/robot/send?access_token=${{ secrets.ACCESS_TOKEN }} \
          -H 'Content-Type: application/json' \
          -d "{
            \"msgtype\": \"text\",
            \"text\": {
              \"content\": \"同步状态: ${STATUS}，源镜像: ${SOURCE}，目标镜像: ${TARGET}\"
            },
            \"at\": {
              \"isAtAll\": true
            }
          }"
        done
